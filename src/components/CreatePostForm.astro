---
import { useTranslations } from "@/i18n/utils";
import { StylesTypes } from "@/constants/enums";
import TextButton from "./TextButton.astro";

interface Props {
  user_id: string;
  username: string;
  lang: "en" | "es";
}
const { user_id, username, lang } = Astro.props;
const t = useTranslations(lang);

if (Astro.request.method == "POST") {
  try {
    const data = await Astro.request.formData();
    const htmlContent = data.get("html_content"); //get ll the html content
    const title = data.get("title");
    const subtitle = data.get("subtitle");

    await fetch(`${import.meta.env.PUBLIC_URL}/api/messages/new`, {
      method: "POST",
      body: JSON.stringify({
        proprietary: user_id,
        proprietary_name: username,
        title: title,
        subtitle: subtitle,
        html_content: htmlContent,
      }),
    });
  } catch (error) {
    return error;
  }
}

const basic = [
  {
    value: StylesTypes.BOLD,
    disabled: false,
    title: "bold",
    type: "bold" as "bold",
  },
  {
    value: StylesTypes.ITALIC,
    disabled: false,
    title: "italic",
    type: "italic" as "italic",
  },
  {
    value: StylesTypes.UNDERLINE,
    disabled: false,
    title: "underlined",
    type: "underlined" as "underlined",
  },
];

const textInputBasicProps = {
  type: "text" as "text",
  class: "text-input__container",
  required: true,
};

const formProps = {
  class: "form-container",
  id: "form",
  enctype: "multipart/form-data",
  method: "post",
};
const fullWidth = "w-full";
const inputWrapperProps = {
  class: fullWidth,
};

const titleInputLabelProps = {
  for: "post_title",
  class: "input-label",
};
const titleInputProps = {
  id: "post_title",
  placeholder: t("input.title.placeholder"),
  name: "title",
  ...textInputBasicProps,
};

const subtitleInputLabelProps = {
  for: "post_subtitle",
  class: "input-label",
};
const subtitleInputProps = {
  id: "post_subtitle",
  placeholder: t("input.subtitle.placeholder"),
  name: "subtitle",
  ...textInputBasicProps,
};

const bodyTextareaLabel = {
  for: "hidden-textarea",
  class: "input-label",
};
const divTextareaProps = {
  class: "input-base h-64 p-4",
  id: "editor",
  contenteditable: "true",
  role: "application" as "application",
  title: t("input.content"),
};
const hiddenTextareaProps = {
  rows: "8",
  id: "hidden-textarea",
  placeholder: t("input.content.placeholder"),
  title: t("input.content"),
  name: "text" as "text",
  maxlength: 500,
  minlength: 1,
  required: true,
  class: "hidden",
};
---

<script>
  import { EditorManager } from "@/constants/classes";
  import { StylesTypes } from "@/constants/enums";

  const form = document.getElementById("form");
  const editor = new EditorManager("editor", "hidden-textarea");

  function setSelectedStyle(button: HTMLElement | null, selected: StylesTypes) {
    if (!button) {
      return;
    } else {
      button.addEventListener("click", () => {
        editor.setStyle(selected);
        //editor.setStyle(button, !selected); //toggle selected style, when none of the styles are selected, bold, italic or underlined, the text go back to regular
      });
    }
  }

  const blackBtn = document.getElementById("font-action-bold");
  setSelectedStyle(blackBtn, StylesTypes.BOLD);

  const underlinedBtn = document.getElementById("font-action-underlined");
  setSelectedStyle(underlinedBtn, StylesTypes.UNDERLINE);

  const italicBtn = document.getElementById("font-action-italic");
  setSelectedStyle(italicBtn, StylesTypes.ITALIC);

  const regularBtn = document.getElementById("font-action-regular");
  setSelectedStyle(regularBtn, StylesTypes.REGULAR);

  /*Get HTML content add it to message post */
  form?.addEventListener("submit", () => {
    const editorElement = document.getElementById("editor");
    const hiddenTextArea = document.createElement(
      "hidden-textarea"
    ) as HTMLTextAreaElement;

    if (editorElement && hiddenTextArea) {
      const text = editorElement.innerText.trim();
      hiddenTextArea.value = text;
      const htmlContent = editorElement.innerHTML;
      const hiddenHtmlInput = document.createElement("input");

      hiddenHtmlInput.type = "hidden";
      hiddenHtmlInput.name = "html_content";
      hiddenHtmlInput.value = htmlContent;
      form.appendChild(hiddenHtmlInput);
    }
  });
</script>

<form {...formProps}>
  <div {...inputWrapperProps}>
    <label {...titleInputLabelProps}>{t("input.title")}</label>
    <input {...titleInputProps} />
  </div>
  <div {...inputWrapperProps}>
    <label {...subtitleInputLabelProps}>{t("input.subtitle")}</label>
    <input {...subtitleInputProps} />
  </div>
  <div {...inputWrapperProps}>
    <label {...bodyTextareaLabel}>{t("input.content")}</label>

    <div class="post-editor__container">
      <div class="post-editor__header">
        {
          basic.map((button) => {
            return (
              <TextButton
                value={button.value}
                disabled={button.disabled}
                title={button.title}
                type={button.type}
              />
            );
          })
        }
      </div>
      <div {...divTextareaProps}></div>
      <textarea {...hiddenTextareaProps}> </textarea>
    </div>
  </div>

  <button type="submit" class="primary-button">
    {t("button.sendMessage")}
  </button>
</form>
