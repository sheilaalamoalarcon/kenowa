---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import { DeletePostButton } from "@/Components/DeletePostButton";
import Dialog from "@/Components/Dialog";

interface Props {
  title: string;
  subtitle: string;
  html_content: string;

  timeStamp: string;
  proprietary_id: string;
  proprietary_name: string;
  id: string;

  postIndex: number;
}

const {
  title,
  subtitle,
  timeStamp,
  proprietary_id,
  proprietary_name,
  id,
  html_content,
  postIndex,
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const daysText: string = t("methods.days");
const hoursText: string = t("methods.hours");
const minutesText: string = t("methods.minutes");
const justUploadedText: string = t("methods.justUploaded");
const seeMoreText: string = t("buttons.seeMore");

function parseDate(value: string) {
  const now = new Date();
  const date = new Date(value);
  const diffInMs = now.getTime() - date.getTime();

  const msToMinutes = 60 * 1000;
  const msToHour = msToMinutes * 60;
  const msToDays = msToHour * 24;

  const days = Math.floor(diffInMs / msToDays);
  const hours = Math.floor(diffInMs % msToDays) / msToHour;
  const minutes = Math.floor(diffInMs % msToHour) / msToMinutes;

  const daysParsed = days.toFixed(0);
  const hoursParsed = hours.toFixed(0);
  const minutesParsed = minutes.toFixed(0);

  const justUploaded =
    minutesParsed === "0" && hoursParsed === "0" && daysParsed === "0";
  const hoursPassed =
    days === 0 && hoursParsed !== "0" && minutesParsed !== "0";
  const minutesPassed = hoursParsed === "0" && minutesParsed != "0";

  if (hoursPassed) {
    return `${hoursParsed} ${hoursText}, ${minutesParsed} ${minutesText}`;
  } else if (minutesPassed) {
    return `${minutesParsed} ${minutesText}`;
  } else if (justUploaded) {
    return justUploadedText;
  }
  return `${daysParsed} ${daysText}, ${hoursParsed} ${hoursText}, ${minutesParsed} ${minutesText}`;
}
---

<script>
  const btns = document.querySelectorAll(".see-more-container");

  btns.forEach((btn) => {
    const dialogID = btn.getAttribute("data-post-id");
    const dialog: HTMLDialogElement = document.getElementById(
      `post-dialog-${dialogID}`
    ) as HTMLDialogElement;

    if (!dialog) {
      console.error("Dialog not found");
      return;
    } else {
      btn.addEventListener("click", () => dialog?.showModal());

      const closeBtn = dialog?.querySelector("#close-btn");
      closeBtn?.addEventListener("click", () => dialog?.close());
    }
  });
</script>
<section id="scroll-animate" class="post-container" aria-label="Post">
  <header class="post-container__header">
    <h1 class="post-proprietary-name">{proprietary_name}</h1>
    <DeletePostButton
      proprietary={proprietary_id}
      message_id={id}
      client:load
    />
  </header>
  <h2 class="post-title">{title}</h2>
  <h3 class="post-subtitle">{subtitle}</h3>
  <p set:html={html_content} class="post-text" />
  <time class="post-timestamp" datetime={timeStamp}>
    {parseDate(timeStamp)}
  </time>
  <button
    data-post-id={postIndex}
    class="see-more-container post-timestamp w-full py-6"
    id="see-more-container"
  >
    <label for="see-more">{seeMoreText}</label>
  </button>
</section>

<Dialog
  title={title}
  id={`post-dialog-${postIndex}`}
  closeBtnID="close-btn"
  client:load
>
  <div>
    <h3 class="post-subtitle text-2xl font-bold capitalize">{subtitle}</h3>
    <p set:html={html_content} class="post-text" />
  </div>
</Dialog>
